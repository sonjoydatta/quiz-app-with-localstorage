{"version":3,"sources":["libs/api/abstractions/storage.ts","utils/helpers/generator.helpers.ts","libs/api/databases/answers.db.ts","libs/api/databases/quiz.db.ts","libs/api/databases/users.db.ts","demo/constants.ts","App.tsx","demo/importData.ts","reportWebVitals.ts","index.tsx"],"names":["DB","databaseName","this","key","value","localStorage","setItem","JSON","stringify","get","getItem","parse","result","includes","push","removeItem","IDGenerator","quizID","userID","answers","filtered","answer","filter","getAnswers","answerDoc","set","getAnswersForUser","Date","now","toString","quiz","id","getAll","found","findOne","Object","assign","Error","remove","user","findAll","find","e","emailAddress","password","dummyQuizzes","title","dummyMembers","name","isAdmin","App","useState","start","setStart","useEffect","create","importData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff304a74.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nexport class DB<T> {\r\n\tprivate databaseName: string;\r\n\r\n\tconstructor(databaseName: string) {\r\n\t\tthis.databaseName = databaseName;\r\n\t}\r\n\r\n\tprotected set(key: string, value: T) {\r\n\t\tlocalStorage.setItem(`${this.databaseName}_${key}`, JSON.stringify(value));\r\n\t\treturn this.get(key)!;\r\n\t}\r\n\r\n\tprotected get(key: string): T | null {\r\n\t\tconst value = localStorage.getItem(`${this.databaseName}_${key}`);\r\n\t\tif (!value) return null;\r\n\t\treturn JSON.parse(value);\r\n\t}\r\n\r\n\tprotected getAll(): T[] {\r\n\t\tconst result = [];\r\n\t\tfor (const key in localStorage) {\r\n\t\t\tif (key.includes(`${this.databaseName}_`)) {\r\n\t\t\t\tconst value = localStorage.getItem(key)!;\r\n\t\t\t\tresult.push(JSON.parse(value));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected remove(key: string) {\r\n\t\tlocalStorage.removeItem(`${this.databaseName}_${key}`);\r\n\t}\r\n}\r\n","export const IDGenerator = () => Date.now().toString();\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport { DB } from '../abstractions/storage';\r\n\r\ninterface Answer {\r\n\tanswer: string;\r\n\tuserID: string;\r\n}\r\n\r\nexport interface IQuizAnswer {\r\n\tquizID: string;\r\n\tanswer: Answer[];\r\n}\r\n\r\nclass UserAnswers extends DB<IQuizAnswer> {\r\n\tconstructor() {\r\n\t\tsuper('user_answers');\r\n\t}\r\n\r\n\t/**\r\n\t * ### Consumed By Admin\r\n\t * */\r\n\tgetAnswers(quizID: string) {\r\n\t\treturn this.get(quizID);\r\n\t}\r\n\r\n\t/**\r\n\t * ### Consumed By User\r\n\t * */\r\n\tgetAnswersForUser(quizID: string, userID: string): IQuizAnswer | null {\r\n\t\tconst answers = this.get(quizID);\r\n\t\tif (answers) {\r\n\t\t\tconst filtered = answers.answer.filter((answer) => answer.userID === userID);\r\n\t\t\treturn {\r\n\t\t\t\t...answers,\r\n\t\t\t\tanswer: filtered,\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * ### Consumed By User\r\n\t * */\r\n\tcreateAnswer(quizID: string, answer: Answer) {\r\n\t\tconst answers = this.getAnswers(quizID);\r\n\t\tif (!answers) {\r\n\t\t\tconst answerDoc: IQuizAnswer = { quizID, answer: [answer] };\r\n\t\t\tthis.set(quizID, answerDoc);\r\n\r\n\t\t\treturn this.getAnswersForUser(quizID, answer.userID)!;\r\n\t\t}\r\n\t\tanswers.answer.push(answer);\r\n\t\tthis.set(quizID, answers);\r\n\t\treturn this.getAnswersForUser(quizID, answer.userID)!;\r\n\t}\r\n}\r\n\r\nexport const userAnswers = new UserAnswers();\r\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport { IDGenerator } from 'utils/helpers';\r\nimport { DB } from '../abstractions/storage';\r\n\r\nexport interface IQuiz {\r\n\tid: string;\r\n\ttitle: string;\r\n\tdescription?: string;\r\n\tanswer: string;\r\n}\r\n\r\nclass QuizDB extends DB<IQuiz> {\r\n\tconstructor() {\r\n\t\tsuper('quiz');\r\n\t}\r\n\r\n\tfindOne(id: string) {\r\n\t\treturn this.get(id);\r\n\t}\r\n\r\n\tfindAll() {\r\n\t\treturn this.getAll();\r\n\t}\r\n\r\n\tcreate(quiz: Omit<IQuiz, 'id'>) {\r\n\t\tconst id = IDGenerator();\r\n\t\treturn this.set(id, { ...quiz, id });\r\n\t}\r\n\r\n\tupdate(id: string, value: Partial<Omit<IQuiz, 'id'>>) {\r\n\t\tconst found = this.findOne(id);\r\n\t\tif (found) {\r\n\t\t\tthis.set(id, Object.assign(found, value));\r\n\t\t\treturn this.findOne(id)!;\r\n\t\t}\r\n\t\tthrow new Error('Quiz Not Found');\r\n\t}\r\n\r\n\tdelete(id: string) {\r\n\t\tthis.remove(id);\r\n\t}\r\n}\r\n\r\n/**\r\n * ### Used By Admin\r\n **/\r\nexport const quiz = new QuizDB();\r\n","import { IDGenerator } from 'utils/helpers';\r\nimport { DB } from '../abstractions/storage';\r\n\r\nexport interface IUser {\r\n\tid: string;\r\n\tname: string;\r\n\temailAddress: string;\r\n\tpassword: string;\r\n\tisAdmin: boolean;\r\n\t// avatarURL: string;\r\n}\r\n\r\nexport class UsersDB extends DB<IUser> {\r\n\tconstructor() {\r\n\t\tsuper('users');\r\n\t}\r\n\r\n\tfindAll() {\r\n\t\treturn this.getAll();\r\n\t}\r\n\r\n\tfindOne(id: string) {\r\n\t\treturn this.get(id);\r\n\t}\r\n\r\n\tcreate(user: Omit<IUser, 'id'>) {\r\n\t\tconst id = IDGenerator();\r\n\t\tconst users = this.findAll();\r\n\t\tconst isRegistered = users.find((e) => e.emailAddress === user.emailAddress);\r\n\t\tif (isRegistered) return null;\r\n\t\treturn this.set(id, { ...user, id });\r\n\t}\r\n\r\n\tsingIn(emailAddress: string, password: string) {\r\n\t\tconst users = this.findAll();\r\n\t\tconst user = users.find((e) => e.emailAddress === emailAddress && e.password === password);\r\n\t\tif (!user) return null;\r\n\t\tconst { password: omitPassword, ...rest } = user;\r\n\t\treturn rest;\r\n\t}\r\n}\r\n\r\nexport const user = new UsersDB();\r\n","import { IQuiz, IUser } from 'libs/api';\n\nexport const dummyQuizzes: Omit<IQuiz, 'id'>[] = [\n\t{\n\t\ttitle: 'What is the capital of New Zealand?',\n\t\tanswer: 'Wellington',\n\t},\n\t{\n\t\ttitle: 'How many permanent teeth does a dog have?',\n\t\tanswer: '42',\n\t},\n\t{\n\t\ttitle: 'What is the name of the largest ocean on earth?',\n\t\tanswer: 'Pacific Ocean',\n\t},\n\t{\n\t\ttitle: 'What is the name of the biggest technology company in South Korea?',\n\t\tanswer: 'Samsung',\n\t},\n\t{\n\t\ttitle: 'What is the currency of Denmark?',\n\t\tanswer: 'Krone',\n\t},\n\t{\n\t\ttitle: 'What is the smallest planet in our solar system?',\n\t\tanswer: 'Mercury',\n\t},\n\t{\n\t\ttitle: 'What is the most sold flavour of Walkerâ€™s crisps?',\n\t\tanswer: 'Cheese and Onion',\n\t},\n\t{\n\t\ttitle: 'How long is an Olympic swimming pool (in meters)?',\n\t\tanswer: '50 meters',\n\t},\n];\n\nexport const dummyMembers: Omit<IUser, 'id'>[] = [\n\t{\n\t\tname: 'John Doe',\n\t\temailAddress: 'john@gmail.com',\n\t\tpassword: '12345678',\n\t\tisAdmin: true,\n\t},\n\t{\n\t\tname: 'Tara Black',\n\t\temailAddress: 'tara@gmail.com',\n\t\tpassword: '12345678',\n\t\tisAdmin: false,\n\t},\n\t{\n\t\tname: 'Mary Hart',\n\t\temailAddress: 'mary@gmail.com',\n\t\tpassword: '12345678',\n\t\tisAdmin: false,\n\t},\n];\n","import { importData } from 'demo/importData';\r\nimport { FC, useEffect, useState } from 'react';\r\n\r\nconst App: FC = () => {\r\n\tconst [start, setStart] = useState<number>(0);\r\n\r\n\tuseEffect(() => importData(start, setStart), [start]);\r\n\r\n\treturn <div>Test</div>;\r\n};\r\n\r\nexport default App;\r\n","import { quiz, user } from 'libs/api';\nimport { Dispatch, SetStateAction } from 'react';\nimport { dummyMembers, dummyQuizzes } from './constants';\n\nexport const importData = (id: number, setStart: Dispatch<SetStateAction<number>>) => {\n\tconst isData = localStorage.getItem('dummyData');\n\n\tif (isData !== 'YES') {\n\t\tif (dummyMembers[id]) user.create(dummyMembers[id]);\n\t\tif (dummyQuizzes[id]) {\n\t\t\tquiz.create(dummyQuizzes[id]);\n\t\t} else {\n\t\t\tlocalStorage.setItem('dummyData', 'YES');\n\t\t}\n\t\tsetStart(id + 1);\n\t}\n};\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\r\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n\t\t\tgetCLS(onPerfEntry);\r\n\t\t\tgetFID(onPerfEntry);\r\n\t\t\tgetFCP(onPerfEntry);\r\n\t\t\tgetLCP(onPerfEntry);\r\n\t\t\tgetTTFB(onPerfEntry);\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'assets/scss/app.scss';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}